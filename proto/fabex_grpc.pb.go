// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FabexClient is the client API for Fabex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FabexClient interface {
	Get(ctx context.Context, in *Entry, opts ...grpc.CallOption) (Fabex_GetClient, error)
	GetRange(ctx context.Context, in *RequestRange, opts ...grpc.CallOption) (Fabex_GetRangeClient, error)
}

type fabexClient struct {
	cc grpc.ClientConnInterface
}

func NewFabexClient(cc grpc.ClientConnInterface) FabexClient {
	return &fabexClient{cc}
}

func (c *fabexClient) Get(ctx context.Context, in *Entry, opts ...grpc.CallOption) (Fabex_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Fabex_serviceDesc.Streams[0], "/fabex.Fabex/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &fabexGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fabex_GetClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type fabexGetClient struct {
	grpc.ClientStream
}

func (x *fabexGetClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fabexClient) GetRange(ctx context.Context, in *RequestRange, opts ...grpc.CallOption) (Fabex_GetRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Fabex_serviceDesc.Streams[1], "/fabex.Fabex/GetRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &fabexGetRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fabex_GetRangeClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type fabexGetRangeClient struct {
	grpc.ClientStream
}

func (x *fabexGetRangeClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FabexServer is the server API for Fabex service.
// All implementations must embed UnimplementedFabexServer
// for forward compatibility
type FabexServer interface {
	Get(*Entry, Fabex_GetServer) error
	GetRange(*RequestRange, Fabex_GetRangeServer) error
	mustEmbedUnimplementedFabexServer()
}

// UnimplementedFabexServer must be embedded to have forward compatible implementations.
type UnimplementedFabexServer struct {
}

func (UnimplementedFabexServer) Get(*Entry, Fabex_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFabexServer) GetRange(*RequestRange, Fabex_GetRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (UnimplementedFabexServer) mustEmbedUnimplementedFabexServer() {}

// UnsafeFabexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FabexServer will
// result in compilation errors.
type UnsafeFabexServer interface {
	mustEmbedUnimplementedFabexServer()
}

func RegisterFabexServer(s grpc.ServiceRegistrar, srv FabexServer) {
	s.RegisterService(&_Fabex_serviceDesc, srv)
}

func _Fabex_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entry)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FabexServer).Get(m, &fabexGetServer{stream})
}

type Fabex_GetServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type fabexGetServer struct {
	grpc.ServerStream
}

func (x *fabexGetServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

func _Fabex_GetRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestRange)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FabexServer).GetRange(m, &fabexGetRangeServer{stream})
}

type Fabex_GetRangeServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type fabexGetRangeServer struct {
	grpc.ServerStream
}

func (x *fabexGetRangeServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

var _Fabex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fabex.Fabex",
	HandlerType: (*FabexServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Fabex_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRange",
			Handler:       _Fabex_GetRange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fabex.proto",
}
